// This file is auto-generated by mach.go
#pragma once
#include <string>

// loader.h ==================================================================
std::string toStringTOOL(uint64_t s){
    switch(s){
    case TOOL_CLANG:
          return " TOOL_CLANG ";
    case TOOL_SWIFT:
          return " TOOL_SWIFT ";
    case TOOL_LD:
          return " TOOL_LD ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringSG(uint64_t s){
    switch(s){
    case SG_HIGHVM:
          return " SG_HIGHVM ";
    case SG_FVMLIB:
          return " SG_FVMLIB ";
    case SG_NORELOC:
          return " SG_NORELOC ";
    case SG_PROTECTED_VERSION_1:
          return " SG_PROTECTED_VERSION_1 ";
    case SG_READ_ONLY:
          return " SG_READ_ONLY ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringS(uint64_t s){
    switch(s){
    case S_ATTR_NO_TOC:
          return " S_ATTR_NO_TOC ";
    case S_REGULAR:
          return " S_REGULAR ";
    case S_LAZY_SYMBOL_POINTERS:
          return " S_LAZY_SYMBOL_POINTERS ";
    case S_THREAD_LOCAL_REGULAR:
          return " S_THREAD_LOCAL_REGULAR ";
    case S_THREAD_LOCAL_VARIABLE_POINTERS:
          return " S_THREAD_LOCAL_VARIABLE_POINTERS ";
    case S_ZEROFILL:
          return " S_ZEROFILL ";
    case S_LAZY_DYLIB_SYMBOL_POINTERS:
          return " S_LAZY_DYLIB_SYMBOL_POINTERS ";
    case S_THREAD_LOCAL_INIT_FUNCTION_POINTERS:
          return " S_THREAD_LOCAL_INIT_FUNCTION_POINTERS ";
    case S_ATTR_LIVE_SUPPORT:
          return " S_ATTR_LIVE_SUPPORT ";
    case S_ATTR_SELF_MODIFYING_CODE:
          return " S_ATTR_SELF_MODIFYING_CODE ";
    case S_CSTRING_LITERALS:
          return " S_CSTRING_LITERALS ";
    case S_8BYTE_LITERALS:
          return " S_8BYTE_LITERALS ";
    case S_GB_ZEROFILL:
          return " S_GB_ZEROFILL ";
    case S_DTRACE_DOF:
          return " S_DTRACE_DOF ";
    case S_SYMBOL_STUBS:
          return " S_SYMBOL_STUBS ";
    case S_MOD_INIT_FUNC_POINTERS:
          return " S_MOD_INIT_FUNC_POINTERS ";
    case S_INTERPOSING:
          return " S_INTERPOSING ";
    case S_16BYTE_LITERALS:
          return " S_16BYTE_LITERALS ";
    case S_4BYTE_LITERALS:
          return " S_4BYTE_LITERALS ";
    case S_COALESCED:
          return " S_COALESCED ";
    case S_THREAD_LOCAL_VARIABLES:
          return " S_THREAD_LOCAL_VARIABLES ";
    case S_ATTR_LOC_RELOC:
          return " S_ATTR_LOC_RELOC ";
    case S_LITERAL_POINTERS:
          return " S_LITERAL_POINTERS ";
    case S_THREAD_LOCAL_ZEROFILL:
          return " S_THREAD_LOCAL_ZEROFILL ";
    case S_ATTR_NO_DEAD_STRIP:
          return " S_ATTR_NO_DEAD_STRIP ";
    case S_ATTR_EXT_RELOC:
          return " S_ATTR_EXT_RELOC ";
    case S_MOD_TERM_FUNC_POINTERS:
          return " S_MOD_TERM_FUNC_POINTERS ";
    case S_INIT_FUNC_OFFSETS:
          return " S_INIT_FUNC_OFFSETS ";
    case S_ATTR_DEBUG:
          return " S_ATTR_DEBUG ";
    case S_ATTR_SOME_INSTRUCTIONS:
          return " S_ATTR_SOME_INSTRUCTIONS ";
    case S_NON_LAZY_SYMBOL_POINTERS:
          return " S_NON_LAZY_SYMBOL_POINTERS ";
    case S_ATTR_PURE_INSTRUCTIONS:
          return " S_ATTR_PURE_INSTRUCTIONS ";
    case S_ATTR_STRIP_STATIC_SYMS:
          return " S_ATTR_STRIP_STATIC_SYMS ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringPLATFORM(uint64_t s){
    switch(s){
    case PLATFORM_WATCHOSSIMULATOR:
          return " PLATFORM_WATCHOSSIMULATOR ";
    case PLATFORM_IOS:
          return " PLATFORM_IOS ";
    case PLATFORM_WATCHOS:
          return " PLATFORM_WATCHOS ";
    case PLATFORM_IOSMAC:
          return " PLATFORM_IOSMAC ";
    case PLATFORM_IOSSIMULATOR:
          return " PLATFORM_IOSSIMULATOR ";
    case PLATFORM_TVOSSIMULATOR:
          return " PLATFORM_TVOSSIMULATOR ";
    case PLATFORM_MACOS:
          return " PLATFORM_MACOS ";
    case PLATFORM_TVOS:
          return " PLATFORM_TVOS ";
    case PLATFORM_BRIDGEOS:
          return " PLATFORM_BRIDGEOS ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringINDIRECT(uint64_t s){
    switch(s){
    case INDIRECT_SYMBOL_LOCAL:
          return " INDIRECT_SYMBOL_LOCAL ";
    case INDIRECT_SYMBOL_ABS:
          return " INDIRECT_SYMBOL_ABS ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringREBASE(uint64_t s){
    switch(s){
    case REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB:
          return " REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB ";
    case REBASE_TYPE_TEXT_ABSOLUTE32:
          return " REBASE_TYPE_TEXT_ABSOLUTE32 ";
    case REBASE_TYPE_TEXT_PCREL32:
          return " REBASE_TYPE_TEXT_PCREL32 ";
    case REBASE_IMMEDIATE_MASK:
          return " REBASE_IMMEDIATE_MASK ";
    case REBASE_OPCODE_DONE:
          return " REBASE_OPCODE_DONE ";
    case REBASE_OPCODE_SET_TYPE_IMM:
          return " REBASE_OPCODE_SET_TYPE_IMM ";
    case REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB:
          return " REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
    case REBASE_OPCODE_ADD_ADDR_IMM_SCALED:
          return " REBASE_OPCODE_ADD_ADDR_IMM_SCALED ";
    case REBASE_TYPE_POINTER:
          return " REBASE_TYPE_POINTER ";
    case REBASE_OPCODE_DO_REBASE_ULEB_TIMES:
          return " REBASE_OPCODE_DO_REBASE_ULEB_TIMES ";
    case REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB:
          return " REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB ";
    case REBASE_OPCODE_ADD_ADDR_ULEB:
          return " REBASE_OPCODE_ADD_ADDR_ULEB ";
    case REBASE_OPCODE_DO_REBASE_IMM_TIMES:
          return " REBASE_OPCODE_DO_REBASE_IMM_TIMES ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringBIND(uint64_t s){
    switch(s){
    case BIND_SPECIAL_DYLIB_SELF:
          return " BIND_SPECIAL_DYLIB_SELF ";
    case BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION:
          return " BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION ";
    case BIND_OPCODE_MASK:
          return " BIND_OPCODE_MASK ";
    case BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB:
          return " BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB ";
    case BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB:
          return " BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB ";
    case BIND_OPCODE_ADD_ADDR_ULEB:
          return " BIND_OPCODE_ADD_ADDR_ULEB ";
    case BIND_TYPE_POINTER:
          return " BIND_TYPE_POINTER ";
    case BIND_TYPE_TEXT_ABSOLUTE32:
          return " BIND_TYPE_TEXT_ABSOLUTE32 ";
    case BIND_IMMEDIATE_MASK:
          return " BIND_IMMEDIATE_MASK ";
    case BIND_OPCODE_SET_DYLIB_SPECIAL_IMM:
          return " BIND_OPCODE_SET_DYLIB_SPECIAL_IMM ";
    case BIND_OPCODE_SET_ADDEND_SLEB:
          return " BIND_OPCODE_SET_ADDEND_SLEB ";
    case BIND_OPCODE_SET_DYLIB_ORDINAL_IMM:
          return " BIND_OPCODE_SET_DYLIB_ORDINAL_IMM ";
    case BIND_OPCODE_THREADED:
          return " BIND_OPCODE_THREADED ";
    case BIND_TYPE_TEXT_PCREL32:
          return " BIND_TYPE_TEXT_PCREL32 ";
    case BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM:
          return " BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM ";
    case BIND_OPCODE_SET_TYPE_IMM:
          return " BIND_OPCODE_SET_TYPE_IMM ";
    case BIND_OPCODE_DO_BIND:
          return " BIND_OPCODE_DO_BIND ";
    case BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB:
          return " BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB ";
    case BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED:
          return " BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED ";
    case BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB:
          return " BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringEXPORT(uint64_t s){
    switch(s){
    case EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION:
          return " EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION ";
    case EXPORT_SYMBOL_FLAGS_REEXPORT:
          return " EXPORT_SYMBOL_FLAGS_REEXPORT ";
    case EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER:
          return " EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER ";
    case EXPORT_SYMBOL_FLAGS_KIND_MASK:
          return " EXPORT_SYMBOL_FLAGS_KIND_MASK ";
    case EXPORT_SYMBOL_FLAGS_KIND_REGULAR:
          return " EXPORT_SYMBOL_FLAGS_KIND_REGULAR ";
    case EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL:
          return " EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL ";
    case EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE:
          return " EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringDICE(uint64_t s){
    switch(s){
    case DICE_KIND_JUMP_TABLE8:
          return " DICE_KIND_JUMP_TABLE8 ";
    case DICE_KIND_JUMP_TABLE16:
          return " DICE_KIND_JUMP_TABLE16 ";
    case DICE_KIND_JUMP_TABLE32:
          return " DICE_KIND_JUMP_TABLE32 ";
    case DICE_KIND_ABS_JUMP_TABLE32:
          return " DICE_KIND_ABS_JUMP_TABLE32 ";
    case DICE_KIND_DATA:
          return " DICE_KIND_DATA ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringMH(uint64_t s){
    switch(s){
    case MH_CANONICAL:
          return " MH_CANONICAL ";
    case MH_DYLIB:
          return " MH_DYLIB ";
    case MH_KEXT_BUNDLE:
          return " MH_KEXT_BUNDLE ";
    case MH_TWOLEVEL:
          return " MH_TWOLEVEL ";
    case MH_OBJECT:
          return " MH_OBJECT ";
    case MH_ALLOW_STACK_EXECUTION:
          return " MH_ALLOW_STACK_EXECUTION ";
    case MH_MAGIC:
          return " MH_MAGIC ";
    case MH_CIGAM:
          return " MH_CIGAM ";
    case MH_CIGAM_64:
          return " MH_CIGAM_64 ";
    case MH_ROOT_SAFE:
          return " MH_ROOT_SAFE ";
    case MH_PREBOUND:
          return " MH_PREBOUND ";
    case MH_FORCE_FLAT:
          return " MH_FORCE_FLAT ";
    case MH_WEAK_DEFINES:
          return " MH_WEAK_DEFINES ";
    case MH_MAGIC_64:
          return " MH_MAGIC_64 ";
    case MH_NOFIXPREBINDING:
          return " MH_NOFIXPREBINDING ";
    case MH_ALLMODSBOUND:
          return " MH_ALLMODSBOUND ";
    case MH_NO_HEAP_EXECUTION:
          return " MH_NO_HEAP_EXECUTION ";
    case MH_SIM_SUPPORT:
          return " MH_SIM_SUPPORT ";
    case MH_EXECUTE:
          return " MH_EXECUTE ";
    case MH_CORE:
          return " MH_CORE ";
    case MH_LAZY_INIT:
          return " MH_LAZY_INIT ";
    case MH_PREBINDABLE:
          return " MH_PREBINDABLE ";
    case MH_SETUID_SAFE:
          return " MH_SETUID_SAFE ";
    case MH_DEAD_STRIPPABLE_DYLIB:
          return " MH_DEAD_STRIPPABLE_DYLIB ";
    case MH_HAS_TLV_DESCRIPTORS:
          return " MH_HAS_TLV_DESCRIPTORS ";
    case MH_DYLINKER:
          return " MH_DYLINKER ";
    case MH_SPLIT_SEGS:
          return " MH_SPLIT_SEGS ";
    case MH_NOMULTIDEFS:
          return " MH_NOMULTIDEFS ";
    case MH_BINDS_TO_WEAK:
          return " MH_BINDS_TO_WEAK ";
    case MH_NO_REEXPORTED_DYLIBS:
          return " MH_NO_REEXPORTED_DYLIBS ";
    case MH_PIE:
          return " MH_PIE ";
    case MH_APP_EXTENSION_SAFE:
          return " MH_APP_EXTENSION_SAFE ";
    case MH_BUNDLE:
          return " MH_BUNDLE ";
    case MH_DSYM:
          return " MH_DSYM ";
    case MH_SUBSECTIONS_VIA_SYMBOLS:
          return " MH_SUBSECTIONS_VIA_SYMBOLS ";
    case MH_NLIST_OUTOFSYNC_WITH_DYLDINFO:
          return " MH_NLIST_OUTOFSYNC_WITH_DYLDINFO ";
    case MH_FVMLIB:
          return " MH_FVMLIB ";
    case MH_PRELOAD:
          return " MH_PRELOAD ";
    case MH_DYLIB_STUB:
          return " MH_DYLIB_STUB ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringLC(uint64_t s){
    switch(s){
    case LC_SEGMENT_SPLIT_INFO:
          return " LC_SEGMENT_SPLIT_INFO ";
    case LC_DYLD_INFO:
          return " LC_DYLD_INFO ";
    case LC_LOAD_DYLINKER:
          return " LC_LOAD_DYLINKER ";
    case LC_ID_DYLIB:
          return " LC_ID_DYLIB ";
    case LC_TWOLEVEL_HINTS:
          return " LC_TWOLEVEL_HINTS ";
    case LC_SOURCE_VERSION:
          return " LC_SOURCE_VERSION ";
    case LC_NOTE:
          return " LC_NOTE ";
    case LC_REEXPORT_DYLIB:
          return " LC_REEXPORT_DYLIB ";
    case LC_ENCRYPTION_INFO_64:
          return " LC_ENCRYPTION_INFO_64 ";
    case LC_SYMSEG:
          return " LC_SYMSEG ";
    case LC_PREPAGE:
          return " LC_PREPAGE ";
    case LC_UUID:
          return " LC_UUID ";
    case LC_MAIN:
          return " LC_MAIN ";
    case LC_IDFVMLIB:
          return " LC_IDFVMLIB ";
    case LC_SEGMENT_64:
          return " LC_SEGMENT_64 ";
    case LC_DYLD_INFO_ONLY:
          return " LC_DYLD_INFO_ONLY ";
    case LC_VERSION_MIN_TVOS:
          return " LC_VERSION_MIN_TVOS ";
    case LC_DYLD_ENVIRONMENT:
          return " LC_DYLD_ENVIRONMENT ";
    case LC_LINKER_OPTIMIZATION_HINT:
          return " LC_LINKER_OPTIMIZATION_HINT ";
    case LC_SUB_UMBRELLA:
          return " LC_SUB_UMBRELLA ";
    case LC_ENCRYPTION_INFO:
          return " LC_ENCRYPTION_INFO ";
    case LC_VERSION_MIN_WATCHOS:
          return " LC_VERSION_MIN_WATCHOS ";
    case LC_DYLD_EXPORTS_TRIE:
          return " LC_DYLD_EXPORTS_TRIE ";
    case LC_DYLD_CHAINED_FIXUPS:
          return " LC_DYLD_CHAINED_FIXUPS ";
    case LC_LOAD_DYLIB:
          return " LC_LOAD_DYLIB ";
    case LC_DYLIB_CODE_SIGN_DRS:
          return " LC_DYLIB_CODE_SIGN_DRS ";
    case LC_BUILD_VERSION:
          return " LC_BUILD_VERSION ";
    case LC_FVMFILE:
          return " LC_FVMFILE ";
    case LC_ROUTINES:
          return " LC_ROUTINES ";
    case LC_ROUTINES_64:
          return " LC_ROUTINES_64 ";
    case LC_FUNCTION_STARTS:
          return " LC_FUNCTION_STARTS ";
    case LC_IDENT:
          return " LC_IDENT ";
    case LC_RPATH:
          return " LC_RPATH ";
    case LC_SUB_LIBRARY:
          return " LC_SUB_LIBRARY ";
    case LC_LOAD_UPWARD_DYLIB:
          return " LC_LOAD_UPWARD_DYLIB ";
    case LC_SEGMENT:
          return " LC_SEGMENT ";
    case LC_LAZY_LOAD_DYLIB:
          return " LC_LAZY_LOAD_DYLIB ";
    case LC_VERSION_MIN_MACOSX:
          return " LC_VERSION_MIN_MACOSX ";
    case LC_DATA_IN_CODE:
          return " LC_DATA_IN_CODE ";
    case LC_LOADFVMLIB:
          return " LC_LOADFVMLIB ";
    case LC_SYMTAB:
          return " LC_SYMTAB ";
    case LC_THREAD:
          return " LC_THREAD ";
    case LC_UNIXTHREAD:
          return " LC_UNIXTHREAD ";
    case LC_SUB_CLIENT:
          return " LC_SUB_CLIENT ";
    case LC_LOAD_WEAK_DYLIB:
          return " LC_LOAD_WEAK_DYLIB ";
    case LC_VERSION_MIN_IPHONEOS:
          return " LC_VERSION_MIN_IPHONEOS ";
    case LC_REQ_DYLD:
          return " LC_REQ_DYLD ";
    case LC_ID_DYLINKER:
          return " LC_ID_DYLINKER ";
    case LC_PREBOUND_DYLIB:
          return " LC_PREBOUND_DYLIB ";
    case LC_SUB_FRAMEWORK:
          return " LC_SUB_FRAMEWORK ";
    case LC_PREBIND_CKSUM:
          return " LC_PREBIND_CKSUM ";
    case LC_CODE_SIGNATURE:
          return " LC_CODE_SIGNATURE ";
    case LC_LINKER_OPTION:
          return " LC_LINKER_OPTION ";
    case LC_DYSYMTAB:
          return " LC_DYSYMTAB ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringSECTION(uint64_t s){
    switch(s){
    case SECTION_TYPE:
          return " SECTION_TYPE ";
    case SECTION_ATTRIBUTES:
          return " SECTION_ATTRIBUTES ";
    case SECTION_ATTRIBUTES_USR:
          return " SECTION_ATTRIBUTES_USR ";
    case SECTION_ATTRIBUTES_SYS:
          return " SECTION_ATTRIBUTES_SYS ";
    default:
        return "UNKNOWN";
    }
}
// found  12

// nlist.h ==================================================================
std::string toStringMAX(uint64_t s){
    switch(s){
    case MAX_SECT:
          return " MAX_SECT ";
    case MAX_LIBRARY_ORDINAL:
          return " MAX_LIBRARY_ORDINAL ";
    default:
        return "UNKNOWN";
    }
}

// Referenced type mask on n_desc value in symbol table entry
std::string toStringREFERENCE(uint64_t s){
    switch(s){
    case REFERENCE_FLAG_PRIVATE_DEFINED:
          return " REFERENCE_FLAG_PRIVATE_DEFINED ";
    case REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY:
          return " REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY ";
    case REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY:
          return " REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY ";
    case REFERENCE_TYPE:
          return " REFERENCE_TYPE ";
    case REFERENCE_FLAG_UNDEFINED_NON_LAZY:
          return " REFERENCE_FLAG_UNDEFINED_NON_LAZY ";
    case REFERENCE_FLAG_UNDEFINED_LAZY:
          return " REFERENCE_FLAG_UNDEFINED_LAZY ";
    case REFERENCE_FLAG_DEFINED:
          return " REFERENCE_FLAG_DEFINED ";
    default:
        return "UNKNOWN";
    }
}

// Additionally bits that can be set for symbol table entry n_desc
std::string toStringAdditionNDesc(uint64_t s){
    switch(s){
    case REFERENCED_DYNAMICALLY:
          return " REFERENCED_DYNAMICALLY ";
    case N_WEAK_REF:
          return " N_WEAK_REF ";
    case N_WEAK_DEF:
          return " N_WEAK_DEF ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringOrdinal(uint64_t s){
    switch(s){
    case SELF_LIBRARY_ORDINAL:
          return " SELF_LIBRARY_ORDINAL ";
    case DYNAMIC_LOOKUP_ORDINAL:
          return " DYNAMIC_LOOKUP_ORDINAL ";
    case EXECUTABLE_ORDINAL:
          return " EXECUTABLE_ORDINAL ";
    default:
        return "UNKNOWN";
    }
}

std::string toStringN(uint64_t s){
    switch(s){
    case N_INDR:
          return " N_INDR ";
    case N_UNDF:
          return " N_UNDF ";
    case N_WEAK_REF:
          return " N_WEAK_REF ";
    case N_WEAK_DEF:
          return " N_WEAK_DEF ";
    case N_ALT_ENTRY:
          return " N_ALT_ENTRY ";
    case N_SYMBOL_RESOLVER:
          return " N_SYMBOL_RESOLVER ";
    case N_PEXT:
          return " N_PEXT ";
    case N_ABS:
          return " N_ABS ";
    case N_PBUD:
          return " N_PBUD ";
    case N_NO_DEAD_STRIP:
          return " N_NO_DEAD_STRIP ";
    case N_ARM_THUMB_DEF:
          return " N_ARM_THUMB_DEF ";
    case N_SECT:
          return "N_SECT ";
    default:
        return "";
    }
}

std::string toStringSTAB(uint64_t s){
    switch(s){
    case N_SLINE:
          return " N_SLINE ";
    case N_SSYM:
          return " N_SSYM ";
    case N_SOL:
          return " N_SOL ";
    case N_EXCL:
          return " N_EXCL ";
    case N_BNSYM:
          return " N_BNSYM ";
    case N_RSYM:
          return " N_RSYM ";
    case N_SO:
          return " N_SO ";
    case N_OSO:
          return " N_OSO ";
    case N_ENTRY:
          return " N_ENTRY ";
    case N_BCOMM:
          return " N_BCOMM ";
    case N_AST:
          return " N_AST ";
    case N_OPT:
          return " N_OPT ";
    case N_LSYM:
          return " N_LSYM ";
    case N_BINCL:
          return " N_BINCL ";
    case N_PARAMS:
          return " N_PARAMS ";
    case N_PC:
          return " N_PC ";
    case N_GSYM:
          return " N_GSYM ";
    case N_STSYM:
          return " N_STSYM ";
    case N_LCSYM:
          return " N_LCSYM ";
    case N_RBRAC:
          return " N_RBRAC ";
    case N_LENG:
          return " N_LENG ";
    case N_FUN:
          return " N_FUN ";
    case N_ENSYM:
          return " N_ENSYM ";
    case N_OLEVEL:
          return " N_OLEVEL ";
    case N_PSYM:
          return " N_PSYM ";
    case N_LBRAC:
          return " N_LBRAC ";
    case N_EINCL:
          return " N_EINCL ";
    case N_ECOML:
          return " N_ECOML ";
    case N_FNAME:
          return " N_FNAME ";
    case N_VERSION:
          return " N_VERSION ";
    case N_ECOMM:
          return " N_ECOMM ";
    default:
        return "UNKNOWN";
    }
}
// found  1